{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/GeolocationJS.js","components/ToggleColorMode.jsx","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","theme.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","bg","useColorModeValue","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","sendercolor","receivercolor","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","userListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","UserListItem","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","bwas","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","Geoloc","lat","setLat","lng","setLng","setStatus","loadingChat","setLoadingChat","accessChat","c","getLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","borderBottomWidth","ToggleColorMode","useColorMode","colorMode","toggleColorMode","Sun","Moon","SideDrawer","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","Chatpage","App","path","component","exact","extendTheme","initialColorMode","useSystemColorMOde","styles","global","code","ReactDOM","render","theme","document","getElementById"],"mappings":"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","file":"static/js/main.1830b746.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured Now!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"emails\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password1\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password2\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\nimport {useColorModeValue} from \"@chakra-ui/react\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n  const bg = useColorModeValue('white', '#2d3748');\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg={bg}\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"monospace\">\r\n          GeoFence Text\r\n        </Text>\r\n      </Box>\r\n      <Box bg={bg} w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport {useColorModeValue} from \"@chakra-ui/react\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://banausaathi.herokuapp.com\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\nconst bg = useColorModeValue('white', '#2d3748');\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        const bwas=socket.emit(\"new message\", data);\r\n        console.log(bwas);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg={bg}\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg={bg}\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {useColorModeValue} from \"@chakra-ui/react\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n  const sendercolor = useColorModeValue('#92b4ec', '#0084FF');\r\n  const receivercolor = useColorModeValue('#E8E8E8', '#3E4042');\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ?  receivercolor : sendercolor\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst userListItem = ({ handleFunction , user}) => {\r\n \r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default userListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {useColorModeValue} from \"@chakra-ui/react\";;\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n  const bg = useColorModeValue('white', '#2d3748');\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg={bg}\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {useColorModeValue} from \"@chakra-ui/react\";\r\n\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n  const bg = useColorModeValue('white', '#2d3748');\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg={bg}\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg={bg}\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport ChatLoading from \"../components/ChatLoading\";\r\nimport UserListItem from \"../components/userAvatar/UserListItem\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\n\r\n\r\nconst Geoloc = () => {\r\n  const [lat, setLat] = useState(null);\r\n  const [lng, setLng] = useState(null);\r\n  const [status, setStatus] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n   const {\r\n    setSelectedChat,\r\n    user,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n  const toast = useToast();\r\n  console.log(status);\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const getLocation = async () => {\r\n    if (!navigator.geolocation) {\r\n      setStatus(\"Geolocation is not supported by your browser\");\r\n    } else {\r\n      setStatus(\"Locating...\");\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setStatus(null);\r\n          setLat(position.coords.latitude);\r\n          setLng(position.coords.longitude);           \r\n        });\r\n                try {\r\n                  setLoading(true);\r\n                    const config = {\r\n                      headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        Authorization: `Bearer ${user.token}`,\r\n                      },\r\n                    };\r\n                    const { data } =  await axios.post(\r\n                      \"/api/user/location\",\r\n                      {\r\n                        lng,lat\r\n                      },\r\n                      config\r\n                    );\r\n                    setLoading(false);\r\n                    setSearchResult(data);\r\n                    console.log(data);\r\n                          }catch (error) {\r\n                    console.log(\"errorrrr\");\r\n                  };\r\n        \r\n      \r\n    }\r\n    };\r\n\r\n     return (\r\n       <><Tooltip label=\"Find Nearby Users\" hasArrow placement=\"bottom-end\">\r\n         <Button variant=\"ghost\" onClick={onOpen}>\r\n           <i className=\"fas fa-map-marker\"></i>\r\n           <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n             Nearby Users\r\n           </Text>\r\n         </Button>\r\n       </Tooltip><Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n           <DrawerOverlay />\r\n           <DrawerContent>\r\n             <DrawerHeader borderBottomWidth=\"1px\">LOCATE USERS</DrawerHeader>\r\n             <DrawerBody>\r\n               <Box d=\"flex\" pb={2}>\r\n                 <Button colorScheme='teal' size=\"md\" onClick={getLocation}>Find New Friends</Button>\r\n               </Box>\r\n               {loading ? (\r\n                 <ChatLoading />\r\n               ) : (\r\n                 searchResult?.map((user) => (\r\n                   <UserListItem\r\n                     key={user._id}\r\n                     user={user}\r\n                     handleFunction={() => accessChat(user._id)} />\r\n                 ))\r\n               )}\r\n               {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n             </DrawerBody>\r\n           </DrawerContent>\r\n         </Drawer></>\r\n)};\r\n\r\nexport default Geoloc;","import {Button} from \"@chakra-ui/button\";\r\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\nimport {useColorMode} from \"@chakra-ui/react\";\r\n\r\n\r\nconst ToggleColorMode = () => {\r\n    const {colorMode, toggleColorMode} = useColorMode();\r\n    return (\r\n        <Button\r\n         onClick={() => toggleColorMode()}>{colorMode === 'dark' ? <SunIcon/> : <MoonIcon/>}\r\n        </Button>\r\n    );\r\n    \r\n};\r\n\r\nexport default ToggleColorMode;","\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport Geoloc from \"../GeolocationJS\"; \r\nimport {Button} from \"@chakra-ui/button\";\r\nimport ToggleColorMode from \"../ToggleColorMode\";\r\nimport {useColorModeValue} from \"@chakra-ui/react\";\r\n\r\n\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n  const bg = useColorModeValue('white', '#2d3748');\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        w=\"100%\"\r\n        bg={bg}\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      ><Geoloc />\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"4xl\" fontFamily=\"monospace\">\r\n          GeoFence Text\r\n        </Text>\r\n        <ToggleColorMode />\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg={bg} rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nconst theme = {\r\n    config: {\r\n        initialColorMode: \"dark\",\r\n        useSystemColorMOde: false,\r\n\r\n\r\n    },\r\n    styles: {\r\n        global: {\r\n            body: {\r\n                margin: 0,\r\n                \"font-family\": \r\n                  \"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', 'sans-serif'\",\r\n                \"-webkit-font-smoothing\": \"antialiased\",\r\n                \"-moz-osx-font-smoothing\": \"grayscale\",\r\n              },\r\n              \r\n            code: {\r\n                \"font-family\":\r\n                    \"source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace\",\r\n              },\r\n              \r\n\r\n\r\n        },\r\n    },\r\n\r\n    \r\n};\r\n\r\nexport default extendTheme(theme);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport theme from \"./theme\";\r\n\r\n\r\nReactDOM.render(\r\n  <ChakraProvider theme={theme}>\r\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}